#### START ########################################################
fit_heating_hours:
  url: http://localhost:5000/action/regressor-model-fit
  method: POST
  content_type: "application/json"
  payload: >-
    {
    "csv_file": "heating_prediction.csv",
    "features": ["degreeday", "solar"],"target": "hours",
    "regression_model": "RandomForestRegression",
    "model_type": "heating_hours_degreeday",
    "timestamp": "timestamp",
    "date_features": ["month", "day_of_week"]
    }

weather_forecast_cache:
  url: http://localhost:5000/action/weather-forecast-cache
  method: POST
  content_type: "application/json"
  payload: "{}"

naive_mpc_optim:
  url: http://localhost:5000/action/naive-mpc-optim
  method: POST
  timeout: 40
  content_type: "application/json"
  payload: >-
    {
      "weather_forecast_cache_only": true
    }

post_naive_mpc:
  url: "http://localhost:5000/action/naive-mpc-optim"
  method: POST
  headers:
    Content-Type: "application/json"
  payload: >
    {
      "load_cost_forecast": {{ ((state_attr("sensor.nordpool_tibber", "raw_today") | map(attribute="value") | list + state_attr("sensor.nordpool_tibber", "raw_tomorrow") | map(attribute="value") | list)[now().hour:][:24]) }},
      "prod_price_forecast": {{ ((state_attr("sensor.nordpool_tibber", "raw_today") | map(attribute="value") | list + state_attr("sensor.nordpool_tibber", "raw_tomorrow") | map(attribute="value") | list)[now().hour:][:24]) }},
      "prediction_horizon": {{ min(24, (((state_attr("sensor.nordpool_tibber", "raw_today") | map(attribute="value") | list + state_attr("sensor.nordpool_tibber", "raw_tomorrow") | map(attribute="value") | list)[now().hour:][:48] | list | length))) }},
      "pv_power_forecast": {{ ([states("sensor.inverter_input_power") | int(0)] + state_attr("sensor.solcast_pv_forecast_forecast_today", "detailedHourly") | selectattr("period_start","gt", utcnow()) | map(attribute="pv_estimate") | map("multiply", 1000) | map("int") | list + state_attr("sensor.solcast_pv_forecast_forecast_tomorrow", "detailedHourly") | selectattr("period_start", "gt", utcnow()) | map(attribute="pv_estimate") | map("multiply", 1000) | map("int") | list) | tojson }},
      "load_power_forecast": {{ [states('sensor.power_load_novar_loads') | int] + (states('input_text.fifo_buffer').split(',') | map('int') | list)[1:] }},
      "soc_init": {{ max(0, states("sensor.battery_state_of_capacity") | int(0)) / 100 }},
      "soc_final": {{ max(100, states("number.battery_end_of_discharge_soc") | int(0)) / 100 }},
      "P_deferrable_nom": [{{ states('sensor.go_echarger_265216_nrg_12') | int }}, 0],
      "delta_forecast": 2,
      "alpha": 1,
      "beta": 0,
      "def_total_hours": [{{ states('sensor.charger_def_hours') | default(0) }}, 0],
      "def_end_timestep": [{{ max(0, states("sensor.def0_end_timestep") | int(0)) }}, 0]
    }

publish_data:
  url: http://192.168.1.200:5000/action/publish-data
  method: POST
  content_type: 'application/json'
  payload: '{"publish_prefix": "mpc_"}'

ml_forecast_model_fit:
  url: http://192.168.1.200:5000/action/forecast-model-fit
  method: POST
  content_type: 'application/json'
  payload: >-
    {
      "days_to_retrieve": 14,
      "model_type": "load_forecast",
      "var_model": "sensor.power_load_novar_loads",
      "sklearn_model": "KNeighborsRegressor",
      "num_lags": 24,
      "split_date_delta": "24h",
      "perform_backtest": "True"
    }

ml_forecast_model_tune:
  url: http://192.168.1.200:5000/action/forecast-model-tune
  method: POST
  content_type: 'application/json'
  payload: >-
    {
      "days_to_retrieve": 14,
      "model_type": "load_forecast",
      "var_model": "sensor.power_load_novar_loads",
      "sklearn_model": "KNeighborsRegressor",
      "num_lags": 24,
      "split_date_delta": "24h",
      "perform_backtest": "True"
    }

ml_forecast_model_predict:
  url: http://192.168.1.200:5000/action/forecast-model-predict
  method: POST
  content_type: 'application/json'
  payload: >-
    {
      "model_type": "load_forecast",
      "var_model": "sensor.power_load_novar_loads",
      "num_lags": 24
    }

# post_naive_mpc_thermal:
#   url: "http://localhost:5000/action/naive-mpc-optim"
#   method: POST
#   headers:
#     Content-Type: "application/json"
#   payload: >
#     {
#       "entity_save": true, "publish_prefix": "mpc_",
#       "load_cost_forecast": "{{ (state_attr('sensor.nordpool_tibber', 'raw_today') | map(attribute='value') | list + state_attr('sensor.nordpool_tibber', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:24] | tojson }}",
#       "prod_price_forecast": "{{ (state_attr('sensor.nordpool_tibber', 'raw_today') | map(attribute='value') | list + state_attr('sensor.nordpool_tibber', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:24] | tojson }}",
#       "pv_power_forecast": "{{ ([states('sensor.inverter_input_power') | int(0)] + (state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedHourly') | selectattr('period_start', 'gt', utcnow()) | map(attribute='pv_estimate') | map('multiply', 1000) | map('int') | list) + (state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedHourly') | selectattr('period_start', 'gt', utcnow()) | map(attribute='pv_estimate') | map('multiply', 1000) | map('int') | list)) | tojson }}",
#       "load_power_forecast": "{{ ([states('sensor.power_load_novar_loads') | int] + (states('input_text.fifo_buffer').split(',') | map('int') | list)[1:] ) | tojson }}",
#       "soc_init": "{{ (max(0, states('sensor.battery_state_of_capacity') | int(0)) / 100) | float }}",
#       "soc_final": "{{ (max(100, states('number.battery_end_of_discharge_soc') | int(0)) / 100) | float }}",
#       "delta_forecast": 2,
#       "alpha": 1,
#       "beta": 0,
#       "def_total_hours": [0, 0],
#       "def_end_timestep": [0, 0],
#       "outdoor_temperature_forecast": "{{ state_attr('sensor.emhass_half_hourly_outside_temperatures', 'temperatures') | tojson }}"
#     }

# post_naive_mpc_thermal-v2:
#   url: "http://localhost:5000/action/naive-mpc-optim"
#   method: POST
#   headers:
#     Content-Type: "application/json"
#   payload: >
#     {
#       "load_cost_forecast": "{{ (state_attr('sensor.nordpool_tibber', 'raw_today') | map(attribute='value') | list + state_attr('sensor.nordpool_tibber', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:24] | tojson }}",
#       "prod_price_forecast": "{{ (state_attr('sensor.nordpool_tibber', 'raw_today') | map(attribute='value') | list + state_attr('sensor.nordpool_tibber', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:24] | tojson }}",
#       "prediction_horizon": "{{ min(24, (state_attr('sensor.nordpool_tibber', 'raw_today') | map(attribute='value') | list + state_attr('sensor.nordpool_tibber', 'raw_tomorrow') | map(attribute='value') | list)[now().hour:][:24] | length) }}",
#       "pv_power_forecast": "{{ ([states('sensor.inverter_input_power') | int(0)] + (state_attr('sensor.solcast_pv_forecast_forecast_today', 'detailedHourly') | selectattr('period_start', 'gt', utcnow()) | map(attribute='pv_estimate') | map('multiply', 1000) | map('int') | list) + (state_attr('sensor.solcast_pv_forecast_forecast_tomorrow', 'detailedHourly') | selectattr('period_start', 'gt', utcnow()) | map(attribute='pv_estimate') | map('multiply', 1000) | map('int') | list)) | tojson }}",
#       "load_power_forecast": "{{ ([states('sensor.power_load_novar_loads') | int] + (states('input_text.fifo_buffer').split(',') | map('int') | list)[1:] ) | tojson }}",
#       "soc_init": "{{ max(0, states('sensor.battery_state_of_capacity') | int(0)) / 100 }}",
#       "soc_final": "{{ max(100, states('number.battery_end_of_discharge_soc') | int(0)) / 100 }}",
#       "delta_forecast": 2,
#       "alpha": 1,
#       "beta": 0,
#       "def_total_hours": [0, 0],
#       "def_end_timestep": [0, 0],
#       "outdoor_temperature_forecast": "{{ state_attr('sensor.emhass_half_hourly_outside_temperatures', 'temperatures') | tojson }}"
#     }

#### END ########################################################
