################################################################################
# -----------------------------------------------------
# HUAWEI SOLAR DATA - Power, Energy and Economy Sensors
# -----------------------------------------------------
#
# This is a package file with the sensors included in Huawei Solar
#
################################################################################
sensor:
  ####Batteri separata sensorer ladda/ur
  - platform: template
    sensors:
      # Sensor som rapporterar laddningskraften för batteriet
      battery_charge_only:
        friendly_name: "Battery Charge Only"
        unit_of_measurement: "W"
        device_class: power
        #state_class: measurement  # Du kan aktivera detta om det stöds i din version av Home Assistant
        value_template: "{{ max(0, states('sensor.battery_charge_discharge_power') | float(0)) }}"
        # Sensor som rapporterar urladdningskraften för batteriet
      battery_discharge_only:
        friendly_name: "Battery Discharge Only"
        unit_of_measurement: "W"
        #state_class: total_increasing
        device_class: power
        #state_class: measurement  # Du kan aktivera detta om det stöds i din version av Home Assistant
        value_template: "{{ -min(0, states('sensor.battery_charge_discharge_power') | float(0)) }}"
      ####Inverter bräkningar
      input_power_with_efficiency_loss:
        friendly_name: "Input Power with Efficiency Loss"
        unique_id: "input_power_with_efficiency_loss"
        unit_of_measurement: "W"
        device_class: power
        value_template: >-
          {% set inverter_rating = 10000 %} {# adjust this value to the rated power of your inverter #}
          {% set inpower = states('sensor.inverter_input_power')|float(0) %}
          {% if inpower < (inverter_rating*0.1) %}
            {{ inpower * 0.90 }}
          {% elif inpower < (inverter_rating*0.2) %}  
            {{ inpower * 0.95 }}
          {% else %}
            {{ inpower * 0.98 }}
          {% endif %}
      #### Energy PV
      energy_pv:
        friendly_name: "PV Energy"
        unique_id: "PV_Energy"
        device_class: energy
        unit_of_measurement: "kWh"
        value_template: >-
          {% set inverter_yield = states('sensor.inverter_total_yield') | float(default=0) %}
          {% set battery_discharge = states('sensor.battery_total_discharge') | float(default=0) %}
          {% set battery_charge = states('sensor.battery_total_charge') | float(default=0) %}
          {{ inverter_yield - battery_discharge + battery_charge }}
      energy_pv_daily:
        friendly_name: "PV Energy Daily"
        unique_id: "PV_Energy_daily"
        device_class: energy
        unit_of_measurement: "kWh"
        value_template: >-
          {% set inverter_daily_yield = states('sensor.inverter_daily_yield') | float(default=0) %}
          {% set battery_day_discharge = states('sensor.battery_day_discharge') | float(default=0) %}
          {% set battery_day_charge = states('sensor.battery_day_charge') | float(default=0) %}
          {{ inverter_daily_yield - battery_day_discharge + battery_day_charge }}
      #### Extra template sensors rör dem inte ####
      grid_to_battery:
        unique_id: grid_to_battery
        device_class: power
        unit_of_measurement: W
        value_template: >
          {% set inv = states('sensor.inverter_active_power')|int(default=0) %}
          {% if inv < 0 %} {{ 0 - inv | int }}
          {% else %} 0
          {% endif %}
      grid_to_house:
        unique_id: grid_to_house
        device_class: power
        unit_of_measurement: W
        value_template: >
          {% set inv = states('sensor.inverter_active_power')|int(default=0) %}
          {% set grid = states('sensor.power_meter_active_power')|int(default=0) %}
          {% if grid < 0 %}
            {% if inv < 0 %} {{ inv - grid | int }}
            {% else %} {{ 0 - grid | int }}
            {% endif %}
          {% else %} 0
          {% endif %}
      solar_to_battery:
        unique_id: solar_to_battery
        device_class: power
        unit_of_measurement: W
        value_template: >
          {% set inv = states('sensor.inverter_input_power')|int(default=0) %}
          {% set bat = states('sensor.battery_charge_discharge_power')|int(default=0) %}
          {% set out = states('sensor.inverter_active_power')|int(default=0) %}
          {% if bat > 0 %}
            {% if out < 0 %} {{ inv }}
            {% else %}  {{ bat }}
            {% endif %}
          {% else %} 0
          {% endif %}
      solar_to_house:
        unique_id: solar_to_house
        device_class: power
        unit_of_measurement: W
        value_template: >
          {% set grid = states('sensor.power_meter_active_power')|int(default=0) %}
          {% set out = states('sensor.inverter_active_power')|int(default=0) %}
          {% set bat = states('sensor.battery_charge_discharge_power')|int(default=0) %}
          {% if out > 0 %}
            {% if grid > 0 %}
              {% if bat > 0 %} {{ out - grid }}
              {% else %} {{ out + bat - grid | abs }}
              {% endif %}
            {% else %}
              {% if bat > 0 %} {{ out }}
              {% else %} {{ out + bat | abs }}
              {% endif %}
            {% endif %}
          {% else %} 0
          {% endif %}
      #### sensor.battery_charge_only
      solar_to_grid:
        unique_id: solar_to_grid
        device_class: power
        unit_of_measurement: W
        value_template: >
          {% set grid = states('sensor.power_meter_active_power')|int(default=0) %}
          {% set out = states('sensor.inverter_active_power')|int(default=0) %}
          {% if out > 0 and grid > 0 %} {{ grid }}
          {% else %} 0
          {% endif %}
      battery_to_grid:
        unique_id: battery_to_grid
        device_class: power
        unit_of_measurement: W
        value_template: >
          {% set inv = states('sensor.inverter_active_power')|int(default=0) %}
          {% set bat = states('sensor.battery_charge_discharge_power')|int(default=0) %}
          {% set grid = states('sensor.power_meter_active_power')|int(default=0) %}
          {% if grid > 0 and bat < 0 and inv > grid %}
            {% if grid - inv - bat >= 0 %} {{ grid - inv - bat }}
            {% else %} 0
            {% endif %}
          {% else %} 0
          {% endif %}
      battery_to_house:
        unique_id: battery_to_house
        device_class: power
        unit_of_measurement: W
        value_template: >
          {% set bat = states('sensor.battery_charge_discharge_power')|int(default=0) %}
          {% set togrid = states('sensor.battery_to_grid')|int(default=0) %}
          {% if bat < 0 %} {{ togrid - bat | int }}
          {% else %} 0
          {% endif %}
      #### Batteristatus om charge idle or discharge ####
      battery_status:
        friendly_name: "Battery Status"
        value_template: >
          {% set charge_discharge_power = states('sensor.battery_charge_discharge_power') | float(default=0) %}
          {% if charge_discharge_power > 0 %}
            Charging
          {% elif charge_discharge_power < 0 %}
            Discharging
          {% else %}
            Idle
          {% endif %}
      #### Husets elförbrukning från Grid #### Data till EMHASS #####
      house_power_from_grid_w:
        unique_id: house_power_from_grid_w
        friendly_name: "Husets Elförbrukning från Nätet"
        unit_of_measurement: "W"
        value_template: >
          {% set buy_power = states('sensor.power_meter_active_power') | float %}
          {% set battery_charge_discharge_power = states('sensor.battery_charge_discharge_power') | float %}
          {% set pv_power = states('sensor.inverter_input_power') | float %}
          {% set grid_power = buy_power - pv_power + battery_charge_discharge_power  %}
          {{ min(0, grid_power) }}
      ########### Power Meter - Calculates the Active Power being consumed in the house from grid, inveters & battery ###########
      # Provides the calculated current load, in Watts, of the house including power being drawn from solar, battery & grid.
      house_consumption_power:
        friendly_name: "House Consumption - Power"
        unique_id: house_consumption_power
        unit_of_measurement: "W"
        availability_template: >
          {{ states('sensor.inverter_active_power') | is_number and states('sensor.power_meter_active_power') | is_number }}
        value_template: >
          {% set inverters_power = states('sensor.inverter_active_power') | float(default=0) %}
          {% set power_meter_power = states('sensor.power_meter_active_power') | float(default=0) %}
          {{ max(0, (inverters_power - power_meter_power)) }}
      ############ Solar power that huse consumes
      solar_power_consumed:
        friendly_name: Solar power consumed
        unique_id: "solar_power_consumed"
#        device_class: power
#        state_class: measurement
#        icon: mdi:solar-power-variant-outline
        unit_of_measurement: "W"
        value_template: >
          {% set house_power = states('sensor.house_power_consumption') | float(default=0) %}
          {% set inverter_power = states('sensor.inverter_input_power') | float(default=0) %}
          {% if house_power > inverter_power %}
            {{ inverter_power | float(default=0) }}
          {% else %}
              {{ house_power | float(default=0) }}
          {% endif %}
        availability_template: >
          {{ states('sensor.house_power_consumption') | is_number
          and states('sensor.inverter_input_power') | is_number }}
#### End #######################################################################
